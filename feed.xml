<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>chrisharry</title>
    <description>My experiences with Makers Academy</description>
    <link>http://chweeks.github.io/</link>
    <atom:link href="http://chweeks.github.io/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Thu, 10 Sep 2015 00:07:48 +0100</pubDate>
    <lastBuildDate>Thu, 10 Sep 2015 00:07:48 +0100</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>Battleships 2.5</title>
        <description>&lt;h3 class=&quot;section-heading&quot;&gt;So Close&lt;/h3&gt;

&lt;p&gt;After the headway I had made yesterday with my battleships program I was slightly worried about today. Most days I have had to change to the other persons code to work on and so start fresh and learn someone else&#39;s design. Not today though, luckily Tim was more than happy to change to my code to work on and so I could carry on with the plans I had been making the day before. It was also a great learning process going through line by line and explaining my code. This process led me to do a bit of refactoring to make it more readable and also pointed out a few redundant pieces of code that I could get rid of. By the end of the day, we had built the game and had automated it but there was still one bug that needed to be fixed and we unfortunately just ran out of time... and energy. Hopefully I&#39;ll be able to fix this bug and then can spend the rest of the week on getting a nice graphical interface to go with the game.&lt;/p&gt;

&lt;h3 class=&quot;section-heading&quot;&gt;Inheritance and Composition&lt;/h3&gt;

&lt;p&gt;Throughout the week we are given research topics to write up and today&#39;s was concerning the difference between inheritance and composition.&lt;/p&gt;

&lt;h2 id=&quot;inheritance&quot;&gt;Inheritance&lt;/h2&gt;

&lt;p&gt;The example below shows inheritance from &lt;strong&gt;parent class&lt;/strong&gt; &lt;code&gt;Dog&lt;/code&gt; to &lt;strong&gt;child class&lt;/strong&gt; &lt;code&gt;ShihTzu&lt;/code&gt;. The child class &lt;strong&gt;inherits&lt;/strong&gt; all the methods of the parent class without having define them. (A like to &lt;code&gt;include&lt;/code&gt;ing a &lt;code&gt;module&lt;/code&gt; &lt;code&gt;Dog&lt;/code&gt;.)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
class Dog

  def bark
    puts &quot;Woof!&quot;
  end

end

class ShihTzu &amp;lt; Dog
end

dog = Dog.new
dog.bark #=&amp;gt; Woof!

little_dog = ShihTzu.new
little_dog.bark #=&amp;gt; Woof!

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this example we&#39;ve explicitly defined our own instance of method &lt;code&gt;bark&lt;/code&gt; in the child class, and this is called in preference to the inherited one (from the parent class).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
class Dog

  def bark
    puts &quot;Woof!&quot;
  end

end

class ShihTzu &amp;lt; Dog

  def bark
    puts &quot;(Annoying) Yap!&quot;
  end

end

dog = Dog.new
dog.bark #=&amp;gt; Woof!

little_dog = ShihTzu.new
little_dog.bark #=&amp;gt; (Annoying) Yap!

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that within the overriding method in the child class, you can call &lt;code&gt;super&lt;/code&gt; to call the method in the parent class, as if &lt;code&gt;yield&lt;/code&gt;ing to it (you return back and carry on in the child method)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
class Dog

  def bark
    puts &quot;Woof!&quot;
  end

end

class ShihTzu &amp;lt; Dog

  def bark
    puts &quot;This dog goes...&quot;
    super
  end

end

dog = Dog.new
dog.bark #=&amp;gt; Woof!

little_dog = ShihTzu.new
little_dog.bark #=&amp;gt; This dog goes...
                #=&amp;gt;  Woof!

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;composition&quot;&gt;Composition&lt;/h2&gt;

&lt;p&gt;The below illustrates the concept of composition, where class &lt;code&gt;ShihTzu&lt;/code&gt; contains an instance of class &lt;code&gt;Dog&lt;/code&gt; and uses one of its methods (&lt;code&gt;bark&lt;/code&gt;).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
class Dog

  def bark
    puts &quot;Woof!&quot;
  end

end

class ShihTzu

  def initialize
    @dog = Dog.new
  end

  def bark
    @dog.bark
  end

end

dog = Dog.new
dog.bark #=&amp;gt; Woof!

little_dog = ShihTzu.new
little_dog.bark #=&amp;gt; Woof!
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;composition-vs-inheritance&quot;&gt;Composition vs Inheritance&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Why would we prefer composition over inheritance?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It’s very subjective! But, in general you would use inheritance where you want all of the methods from a class, and composition where you might only want to take some elements.&lt;/p&gt;

&lt;p&gt;For example, we’d probably want our &lt;code&gt;ShihTzu&lt;/code&gt; class to &lt;strong&gt;inherit&lt;/strong&gt; &lt;code&gt;Dog&lt;/code&gt; but only &lt;strong&gt;have an instance of&lt;/strong&gt; class &lt;code&gt;Animal&lt;/code&gt;, which includes functionality that all animals might have. All animals are &lt;strong&gt;composed with&lt;/strong&gt; an instance of &lt;code&gt;Animal&lt;/code&gt; class inside them, but only dogs will &lt;strong&gt;inherit&lt;/strong&gt; behaviour from class &lt;code&gt;Dog&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Chris&lt;/p&gt;
</description>
        <pubDate>Wed, 09 Sep 2015 13:00:00 +0100</pubDate>
        <link>http://chweeks.github.io/2015/09/09/weeks2-day3/</link>
        <guid isPermaLink="true">http://chweeks.github.io/2015/09/09/weeks2-day3/</guid>
        
        
      </item>
    
      <item>
        <title>Battleships 2.0</title>
        <description>&lt;h3 class=&quot;section-heading&quot;&gt;Minimum Viable Product&lt;/h3&gt;

&lt;p&gt;After trying and failing in one approach to this project &lt;a href=&quot;http://chweeks.github.io/2015/09/08/week2-day1/&quot;&gt;yesterday&lt;/a&gt; I was determined to try and make things as simple as possible for myself.&lt;/p&gt;

&lt;p&gt;Today I was working with Alex, we worked extremely well together and had the same views as to how we should build the game. Unlike yesterday we started by building a very basic system where you can create a boat that holds co-ordinates. You then have a player that can fire at a set of chosen co-ordinates . These co-ordinates are then compared to all the co-ordinates held by the ships and if there&#39;s a match they are deleted and the boat is destroyed. This was all built with ships of size 1 and a 4X4 grid. After this was built it was just a case of slowly scaling up from this working start point. We slowly added things such as making sure you couldn&#39;t place a ship outside the grid, or on top of one another and also compiling arrays of each players hits and misses, so they can check their shot history..&lt;/p&gt;

&lt;p&gt;Ideally we would like to automate the game as much as we can to minimise the user interaction with the code. We want to get it to a point where the user can just boot up the game and then not have to input anything but co-ordinates, when placing a ship and when firing. We were extremely close to finishing this so hopefully we&#39;ll be able to get together at some point later in the week and finish it off.&lt;/p&gt;

&lt;h3 class=&quot;section-heading&quot;&gt;Lexoo Lunch Talk&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/img/lexoo.jpg&quot; alt=&quot;lexoo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Today we had a talk by Chris O’Sullivan the CTO and co-founder of &lt;a href=&quot;https://www.lexoo.co.uk&quot;&gt;Lexoo&lt;/a&gt;, a place to get quick quotes from various lawyers online. He spoke about the best ways to ensure you save time and money when trying to create a business code wise. His key points were to write as little code as possible, get someone else to code instead and popping the &#39;Why?&#39; stack. Writing as little code as possible means saving your time and hence money and also means it is easier to maintain. Getting someone else to write the code is again based on saving your time and therefore money. Why spend time trying to recreate a service that someone else has already made when you can be focussing on your product. Finally popping the &#39;Why?&#39; stack, when implementing a new feature of your product you should ask yourself/team why you are doing it. If you keep recursively asking why, it should come down to these three reasons:
&lt;ul&gt;&lt;li&gt;Protect revenue&lt;/li&gt;
&lt;li&gt;Increase revenue&lt;/li&gt;
&lt;li&gt;Manage cost&lt;/li&gt;
&lt;/ul&gt;
 If it doesn&#39;t do one of these things then it is most likely a non-essential feature and your time and money is best spent elsewhere.
&lt;/p&gt;

&lt;p&gt;Chris&lt;/p&gt;
</description>
        <pubDate>Wed, 09 Sep 2015 13:00:00 +0100</pubDate>
        <link>http://chweeks.github.io/2015/09/09/week2-day2/</link>
        <guid isPermaLink="true">http://chweeks.github.io/2015/09/09/week2-day2/</guid>
        
        
      </item>
    
      <item>
        <title>Battleships</title>
        <description>&lt;h3 class=&quot;section-heading&quot;&gt;Feature Creep&lt;/h3&gt;

&lt;p&gt;Our project this week was to design the game &lt;a href=&quot;https://en.wikipedia.org/wiki/Battleship_(game)&quot;&gt;Battleships&lt;/a&gt;. Before I had started I thought this would be an easy thing to do and would get a working version of the game by the end of day 1. I was wrong.&lt;/p&gt;

&lt;p&gt;I was paired with Joe for the day, who is a very smart guy and so we dove straight into how we thought we should build our game. Long story short by the end of the day we had written quite a lot of code that accomplished a lot, except play the game. I believe we were doomed from the start due to feature creep. Feature creep is the expansion or addition of new features in a product which go beyond the basic function of the product. We were thinking too far ahead and so started implementing features that weren&#39;t essential to the game, such as a visual representation of the grid. Obviously in the long run this would be a great feature to have but we should have been following the principles of MVP (minimum viable product) and first built the simplest version of the game we could. Once we had that we could build some complexity on top of a solid foundation of a working game.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/complexity.jpg&quot; alt=&quot;complexity&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Luckily tomorrow I can start again fresh and try out some new ideas of how to design the game. Also a lot of of the more time-consuming code we wrote, such as giving a ship its co-ordinates through a starting co-ordinate and an orientation can be re-used and re-implemented to speed up my work tomorrow.&lt;/p&gt;

&lt;p&gt;Chris&lt;/p&gt;
</description>
        <pubDate>Tue, 08 Sep 2015 13:00:00 +0100</pubDate>
        <link>http://chweeks.github.io/2015/09/08/week2-day1/</link>
        <guid isPermaLink="true">http://chweeks.github.io/2015/09/08/week2-day1/</guid>
        
        
      </item>
    
      <item>
        <title>Airport Challenge</title>
        <description>&lt;h3 class=&quot;section-heading&quot;&gt;The Task&lt;/h3&gt;

&lt;p&gt;Every week we have a weekend challenge meant to test and solidify what we have learnt throughout the week. We were told to ensure that by Monday morning at 9AM we had submitted a pull request with our challenge with even the smallest amount of code if necessary, just something. We were also told about not worrying about completely finishing the Boris-Bikes project before starting the challenge. So naturally I went about completing the Boris-Bikes challenge all Saturday and didn&#39;t even look at the challenge till Sunday.&lt;/p&gt;
&lt;p&gt;Our challenge for the weekend was to create a basic simulation of an airport through a set of given user stories. The task had very similar elements to the Boris-Bikes projects. We had two Objects a plane and an airport. A plane needed to have a status, either flying or landed. The airport needed to be able to instruct the plane to land and to instruct it to take off. The planes couldn&#39;t land if the airport was full and couldn&#39;t land or take off when the weather was stormy.&lt;/p&gt;
&lt;p&gt;The code itself was very simple but as usual it was the tests that made it tricky. Having a random method for the chance of stormy weather made the tests more difficult as we had to learn about stubbing. Essentially when testing to make sure the planes couldn&#39;t land or take off in stormy weather I had to &#39;stub&#39; the random_weather method to ensure that the weather was always stormy for those tests. &lt;/p&gt;
&lt;p&gt;Once submitted the code gets &#39;marked&#39; and I use marked very loosely as when its submitted some automated tests are run on the code. The main test is that all your written tests pass and also that your tests cover everything within the system. I got a hundred percent coverage which I was really happy with but then there was hound. From what I understand this hound program goes through your code and tests its readability. It throws up errors for lines and methods that are too long or if indentation is wrong. I had one of these errors that I just couldn&#39;t seem to shake for the longest time but managed to succeed in the end.&lt;/p&gt;

&lt;p&gt; My first week at Makers has been an amazing experience, I&#39;ve had a lot of fun and have learnt more than I thought possible. Their have been some great moments where you seem to understand everything and feel like a god, but their have been even more moments where you come crashing face first back down to earth and realise you have but scratched the surface.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://xkcd.com/979/&quot;&gt;&lt;img src=&quot;/img/program-comic.jpg&quot; alt=&quot;https://xkcd.com/979/&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;1 week down, 11 to go.&lt;/p&gt;

&lt;p&gt;Chris&lt;/p&gt;
</description>
        <pubDate>Sun, 06 Sep 2015 13:00:00 +0100</pubDate>
        <link>http://chweeks.github.io/2015/09/06/weekend-challenge-1/</link>
        <guid isPermaLink="true">http://chweeks.github.io/2015/09/06/weekend-challenge-1/</guid>
        
        
      </item>
    
      <item>
        <title>Day 4</title>
        <description>&lt;h3 class=&quot;section-heading&quot;&gt;Doubles&lt;/h3&gt;

&lt;p&gt;Today was the last day to work on our Boris bike projects. The morning standup went for quite a while as we went over using doubles and verified doubles in our tests.&lt;/p&gt;

&lt;p&gt;While writing Rspec tests initially for the Boris-Bikes projects, I may have written a test like this in the DockingStation spec file:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;bike = Bike.new&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;subject.dock(bike)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;expect(subject.bikes.include?(bike)).to eql true&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;
This is to test whether the DockingStation method &#39;dock&#39; adds the bike to the array bikes within the docking station. This test is not very good as it includes creating an instance of the Bike class and so the test is not isolated. Therefore any changes we make to the Bike class could have a negative effect on all our tests pertaining to the DockingStation class. This is where a double can be very handy. By using a double we create a kind of &#39;stand in&#39; for the bike object without having to create a new Bike object.
&lt;/p&gt;
&lt;p&gt;&lt;code&gt;bike = :bike&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;subject.dock(bike)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;expect(subject.bikes.include?(bike)).to eql true&lt;/code&gt;&lt;/p&gt;
&lt;p&gt; This way we can test the DockingStation in isolation and any future changes we make to the bike class will not alter the outcome of our tests. Armed with this new knowledge Gavin and I still didn&#39;t use them till the end. Our thought process was to get the whole system working first and then refactor it to use doubles and clean it up a bit. By the end of the day we had finished all the features of the system and left the refactoring to do in our spare time.&lt;/p&gt;

&lt;p&gt;Although, saying that, I don&#39;t know how much spare time we&#39;ll be getting as we had our first weekend challenge go live this afternoon. But I&#39;m going to take the evening off and try not to even look at the challenge till tomorrow. Then its back on the grind.&lt;/p&gt;

&lt;p&gt;Chris&lt;/p&gt;
</description>
        <pubDate>Fri, 04 Sep 2015 13:00:00 +0100</pubDate>
        <link>http://chweeks.github.io/2015/09/04/day4/</link>
        <guid isPermaLink="true">http://chweeks.github.io/2015/09/04/day4/</guid>
        
        
      </item>
    
      <item>
        <title>Day 3</title>
        <description>&lt;h3 class=&quot;section-heading&quot;&gt;Do Over&lt;/h3&gt;

&lt;p&gt;This morning we had our standup run, with boundless energy as always, by our coach Tansaku. We discussed what we had struggled with the day before and a large topic of discussion was the containment of error methods within blocks rather than normal parenthesis. We were also given the task of writing a blog post on Red-Green-Refactor and how its linked to Test Driven Development which I&#39;ve already mentioned &lt;a href=&quot;http://chweeks.github.io/2015/09/02/day2/&quot;&gt;here.&lt;/a&gt;&lt;/p&gt;

&lt;h3 class=&quot;section-heading&quot;&gt;Boris Bikes part-2&lt;/h3&gt;

&lt;p&gt;After the standup we split into our new pairing partners for the day. I was paired with David who was a great guy to work with. It was here that I realised how much Philip and I had done the day before, which I was glad to know as we were working till around 8 last night. On the other hand, the way the pair programming works here means that you always jump down to the code of the person who has done less. This means no one is rushed and has an equal opportunity to work through the projects in their own time. It also gives the chance to the person jumping down to reinforce what they&#39;ve learnt by guiding their pair through the challenges. Although you know in the long run this way of things will help rather than hinder you, it is tough to not get frustrated when you think of how far you could get if you were working on your own.&lt;/p&gt;

&lt;p&gt;By the afternoon we had caught up to my work from the day before and then started to make great strides into the rest of the project. We worked really well together and there were a lot of good &#39;debates&#39; through the day on which way to do things. This made sure we understood and knew why we thought our way was best, which ensured we learnt the most we could from each other.&lt;/p&gt;

&lt;p&gt;After yesterday I really didn&#39;t fancy staying too late and so left pretty early as we made some good progress in the afternoon and very close to finishing the project.&lt;/p&gt;

&lt;p&gt;Chris&lt;/p&gt;
</description>
        <pubDate>Thu, 03 Sep 2015 13:00:00 +0100</pubDate>
        <link>http://chweeks.github.io/2015/09/03/day3/</link>
        <guid isPermaLink="true">http://chweeks.github.io/2015/09/03/day3/</guid>
        
        
      </item>
    
      <item>
        <title>Day 2</title>
        <description>&lt;h3 class=&quot;section-heading&quot;&gt;Standup&lt;/h3&gt;

&lt;p&gt;The second day started with the cohort separating into bytes (small groups) in order to have their standups. This ideally is a short meeting in the morning to discuss what you had done the day before and what you plan to do today. We would also share what we had struggled with in order to get our coaches input. Obviously we hadn&#39;t written any code yet and so it was simply to get used to the idea of a standup and for our coach (Sam A.K.A Tansaku) to tell us our projects for the week.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/standup.jpg&quot; alt=&quot;standup&quot; /&gt;&lt;/p&gt;

&lt;h3 class=&quot;section-heading&quot;&gt;Boris Bikes&lt;/h3&gt;

&lt;p&gt;The project for our first week is to create a system that&#39;ll simulate the use of Boris Bikes. The basics of what we achieved today was creating a DockingStation class that has a capacity, could have a bike docked into it and also release a bike to a customer. We also created Bike class which creates a bike that can be working or not. We also implemented various other features but nothing too taxing. The code itself was the easiest part of the first day it&#39;s the test driven development that drove me a bit crazy.&lt;/p&gt;

&lt;h3 class=&quot;section-heading&quot;&gt;Test Driven Development&lt;/h3&gt;

&lt;p&gt;TDD is a software development process which repeats a small cycle of development.
&lt;ol&gt;
&lt;li&gt;Write an initially failing test for a new feature or function you wish to implement&lt;/li&gt;
&lt;li&gt;Write the bare minimum amount of code that will pass the test&lt;/li&gt;
&lt;li&gt;Refactor the code to a decent standard&lt;/li&gt;
&lt;li&gt;Repeat the process&lt;/li&gt;
&lt;/ol&gt;

This is also known as the Red-Green-Refactor cycle, red referring to the failed test, green the passed test and refactor.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/rgrefactor.jpg&quot; alt=&quot;rgrefactor&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This allows you to change little bits at a time and so always have a working code base that you can jump back to or go live if needed. This style also makes it a lot easier for the next developer working on the code to understand what it does and how it works.&lt;/p&gt;

&lt;p&gt;Writing the tests first was a difficult concept to come to terms with as all you wanted to do was just get your head down and start creating features. It was also made more difficult as the tests are written using Rspec which, although is pure Ruby, has a whole new set of syntax to learn. The pair programming aspect of it was also a bit strange to begin with but I had a great partner in Phil and by the end of the day I was pretty confident with the syntax and the TDD side of it was coming easier and making more sense.&lt;/p&gt;

&lt;p&gt;Chris&lt;/p&gt;
</description>
        <pubDate>Wed, 02 Sep 2015 13:00:00 +0100</pubDate>
        <link>http://chweeks.github.io/2015/09/02/day2/</link>
        <guid isPermaLink="true">http://chweeks.github.io/2015/09/02/day2/</guid>
        
        
      </item>
    
      <item>
        <title>First Day</title>
        <description>&lt;h3 class=&quot;section-heading&quot;&gt;The Name Game&lt;/h3&gt;

&lt;p&gt;The first day at Maker&#39;s was absolutely not what I expected and at the same time was the perfect start. First thing to mention is that absolutely no code was written on the first day. The day was all about getting to know the others in your cohort and an explanation of the structure of each day/week.&lt;/p&gt;

&lt;p&gt;There was no time for being shy as we were instantly told to pair up with someone. In 5 minutes we would then, as a pair, introduce each other to the rest of the group. I paired up with Yana, who used to be a tax Lawyer back in Russia but has come here so she can do something she actually enjoys instead. We then played the name game where, standing in a circle, we have to name everyone in the circle and where they&#39;re from. This surprisingly worked and I can now name all the 30 odd people in my cohort.&lt;/p&gt;

&lt;p&gt;We were then split into small groups and were given 15 minutes to build a spaghetti tower. The aim was to build the tower as high as we could with the materials we were given and place a marshmallow at the top of the tower. It&#39;s safe to say my group did not win this challenge despite having an engineer in the group. I&#39;m glad I didn&#39;t take a picture of it as it was possibly the ugliest thing ever constructed. Nonetheless it was fun building this monstrosity and we all had a good laugh.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/spaghetti-challenge.jpg&quot; alt=&quot;spaghetti-challenge&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We were then given a small talk on the significance of this challenge and which teams do better and why. Rather than try explain it myself, &lt;a href=&quot;https://www.youtube.com/watch?v=H0_yKBitO8M&quot;&gt;here is a TED talk &lt;/a&gt; that does it a lot better.&lt;/p&gt;

&lt;p&gt;A lot more stuff was said and done but their was so much of it that the only other thing I remember after this was the pub. I only stayed for a drink or two (on Makers) but still only managed to get home at 10pm. The northern line was down and so ended up walking and getting two buses home. Yay public transport. &lt;/p&gt;

&lt;p&gt;Chris&lt;/p&gt;
</description>
        <pubDate>Tue, 01 Sep 2015 13:00:00 +0100</pubDate>
        <link>http://chweeks.github.io/2015/09/01/First%20Day/</link>
        <guid isPermaLink="true">http://chweeks.github.io/2015/09/01/First%20Day/</guid>
        
        
      </item>
    
      <item>
        <title>Pre-Course Week 4</title>
        <description>&lt;h3 class=&quot;section-heading&quot;&gt;Ready to go&lt;/h3&gt;
&lt;p&gt;This week has been a bit of a strange one. After the initial release of work, things have really slowed down and I  finished all the challenges and exercises early in the week. From that point on, it was essentially get as much CodeWars done as you can in order to drive home the ruby syntax and problem solving. A book called &#39;The Pragmatic Rubyist&#39; was also recommended for us to work through.&lt;/p&gt;

&lt;p&gt;After working through Chris Pine&#39;s book and other various texts, I was a bit sick of reading things and so just carried on working through some CodeWars problems and just generally played around with the language as well as trying to revise some Javascript I had done previously.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/im-ready.jpg&quot; alt=&quot;imready&quot; /&gt;&lt;/p&gt;

&lt;p&gt; I then spent the weekend doing absolutely nothing coding related and just relaxed in anticipation of the non-stop three months to come.&lt;/p&gt;

&lt;p&gt;Chris&lt;/p&gt;
</description>
        <pubDate>Sun, 30 Aug 2015 13:00:00 +0100</pubDate>
        <link>http://chweeks.github.io/2015/08/30/precourse-week4/</link>
        <guid isPermaLink="true">http://chweeks.github.io/2015/08/30/precourse-week4/</guid>
        
        
      </item>
    
      <item>
        <title>Pre-Course Week 3</title>
        <description>&lt;h3 class=&quot;section-heading&quot;&gt;Pair Programming&lt;/h3&gt;
&lt;p&gt;As part of our preparation for the course ahead, we were encouraged to organise a pair programming session with our mentors this week. As we were also invited to attend the senior class&#39; graduation on Friday I planned to meet my mentor (Lewis) Friday afternoon. The pair programming session was great, Lewis was encouraging and we decided to try and refactor a Chris Pine exercise I had completed earlier. Working with a partner while coding is a rather strange feeling. Normally I would just think things through in my head, start typing and just chop and change the code as I went along. In a pair you have to work a bit differently, you have to try and verbalise your thought process in order for your partner to understand your thinking and what your doing.&lt;/p&gt;

&lt;p&gt;Lewis also spoke to me about the concept of &#39;smelly&#39; code, where the code may work but doesn&#39;t look quite right. This essentially comes down to making your code as readable as you can. This makes it easy for someone to jump in and understand what your program does and doesn&#39;t do and edit it if necessary. Once we&#39;d worked through the code and made it use recursion rather than a while loop, we just chatted about the course and how things work for the first couple of weeks when you get there.&lt;/p&gt;

&lt;p&gt;All in all it was some nice preparation for the daily pair programming I&#39;ll be doing on the course. Lewis told me I&#39;ll generally have a new partner to work with everyday and as a pair you&#39;ll revert to working on the code of the person who hasn&#39;t got as far. This makes sure everyone&#39;s on a level playing field and allows the person ahead to reinforce their learning through explaining how its done.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/pair-programming.jpg&quot; alt=&quot;pair-programming&quot; /&gt;&lt;/p&gt;
&lt;h3 class=&quot;section-heading&quot;&gt;Senior Graduation&lt;/h3&gt;
&lt;p&gt; The senior classes graduation was a fun event and it was great to see how much they&#39;d achieved while on the course. The graduation started with a speech from Ruben (one of the founders of Makers), in which he spoke of the journey Makers Academy had gone through and how it had overcome the doubt people had in its ability to teach people to be developers in 12 weeks. This has now culminated (in his words) with various groups knocking on their doors and asking them to replicate their success overseas. He then spoke about a scholarship fund they had been working on in order to provide a student who had fallen out of main stream education, with next to no qualifications, with a place on their course. He was proud to announce that this person was here tonight and he was actually one of the graduates.&lt;/p&gt;

&lt;p&gt; After Rubens speech, Sam was introduced, a man dressed in full Samurai/Centurion gear (code warrior). Either way Sam is the head of education and was their to introduce the graduating teams who were to give a presentation on their final projects. The final projects were very impressive and all very different. There was a memory training / tamagochi style mobile app,  a music streaming website, a kids mobile game to help make sight seeing fun and even an &#39;Airbnb but for camping&#39; app. All the projects were really well presented and the teams enthusiasm was clear to see. After the presentations there were representatives of some of the hiring partners there to talk to the teams about their projects in some more depth and there was plenty of beer being passed around.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/grad2.jpg&quot; alt=&quot;grad2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;All of this has made me want to really get this course going and makes me excited for what I&#39;ll be able to build once the course is over. Congrats to the graduates and good luck.&lt;/p&gt;

&lt;p&gt;Chris&lt;/p&gt;

</description>
        <pubDate>Sun, 23 Aug 2015 13:00:00 +0100</pubDate>
        <link>http://chweeks.github.io/2015/08/23/precourse-week3/</link>
        <guid isPermaLink="true">http://chweeks.github.io/2015/08/23/precourse-week3/</guid>
        
        
      </item>
    
  </channel>
</rss>
