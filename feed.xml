<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>chrisharry</title>
    <description>My experiences with Makers Academy</description>
    <link>http://chweeks.github.io/</link>
    <atom:link href="http://chweeks.github.io/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Mon, 14 Sep 2015 23:13:57 +0100</pubDate>
    <lastBuildDate>Mon, 14 Sep 2015 23:13:57 +0100</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>What Weekend</title>
        <description>&lt;h3 class=&quot;section-heading&quot;&gt;Weekend Challenge&lt;/h3&gt;

&lt;p&gt;After an extremely busy week of working through the Battleship project I was looking forward to a relatively relaxed weekend, with a small little challenge thrown in. I was wrong, so very wrong. I woke on Saturday after a party at Makers, bad idea, and felt a little worse for wear. Nonetheless I decided to have a look at my emails and found that we actually had two challenges to complete this weekend. The first of which was to re-write the Ruby Array method inject, which I&#39;ve included below.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class Array
  def new_inject(result = nil)
    copy = self.dup
    result ||= copy[0]
    copy.each do |element|
      result =  yield(result, element)
    end
    result
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 class=&quot;section-heading&quot;&gt;Takeaway Challenge&lt;/h3&gt;

&lt;p&gt;The second challenge, as well as two blog write ups, was to create a Takeaway service. This takeaway service would allow you to show a menu, place an order on some accumulation of the dishes on the menu. You can then place the order which checks your payment is the correct amount and prints your order to the screen as well as the total. If your payment is correct, the program will text you telling you your meal will be delivered within the next 45 minutes. This in theory was a relatively easy challenge but the text feature made it quite challenging. We would be using a gem &lt;a href=&quot;&quot; src=&quot;https://github.com/twilio/twilio-ruby&quot;&gt;Twilio&lt;/a&gt; which allows you to send a text within your program to a number. Implementing the feature was challenging but it was testing it that caused the real problems. I spent far too long on sunday night to get this done and ended up getting around 1 and 1/2 hours sleep, but finished the challenge so worth it. Kind of.&lt;/p&gt;

&lt;p&gt;Apart from this insane weekend the week went really well, I can&#39;t quite believe the amount of stuff we&#39;ve all learnt in the two weeks of being here. From what I&#39;ve heard from the seniors next week we&#39;ll be working on Sinatra, a web app framework, which will allow us to quickly create web apps with Ruby. Looking forward to bringing some of our code to life and not just running through the command line.&lt;/p&gt;
&lt;p&gt;Chris&lt;/p&gt;
</description>
        <pubDate>Mon, 14 Sep 2015 13:00:00 +0100</pubDate>
        <link>http://chweeks.github.io/2015/09/14/week2-review/</link>
        <guid isPermaLink="true">http://chweeks.github.io/2015/09/14/week2-review/</guid>
        
        
      </item>
    
      <item>
        <title>Blocks, Procs, and Lambdas</title>
        <description>&lt;p&gt;&lt;strong&gt;&lt;em&gt;What are blocks, procs and lambdas? Provide code examples to show the differences between each of them. What makes procs and lambdas different to methods?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h3 class=&quot;section-heading&quot;&gt;Blocks&lt;/h3&gt;

&lt;p&gt;A block is a set of statements within a pair of curly braces &lt;code&gt;{...}&lt;/code&gt; or a &lt;code&gt;do ... end&lt;/code&gt;. Blocks are pieces of code attached to method calls and can only be used immediately after a method call. eg:
&lt;pre&gt;&lt;code&gt;array = [1,2,3,4,5]
array.map { |element| element * 2 }
# =&amp;gt; [2,4,6,8,10]
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h3 class=&quot;section-heading&quot;&gt;Proc&lt;/h3&gt;
&lt;p&gt;The big difference between a block and a Proc is that a Proc is an abject whereas a block isn&#39;t. It is an instance of the Proc class and since it is an object it can have methods called on it and can be assigned to a variable.
&lt;pre&gt;&lt;code&gt;array = [1,2,3,4,5]
p = Proc.new { |element| element * 2 }
array.map(&amp;amp;p)
# =&amp;gt; [2,4,6,8,10]

proc = Proc.new{puts &#39;Hello&#39;}
proc.call
# =&amp;gt; &#39;Hello&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;The proc can be called using the (&lt;code&gt;&amp;amp;p&lt;/code&gt;) as shown above, by using &lt;code&gt;proc.call&lt;/code&gt; or &lt;code&gt;proc.yield&lt;/code&gt;.&lt;/p&gt;

&lt;h3 class=&quot;section-heading&quot;&gt;Lambda&lt;/h3&gt;

&lt;p&gt;
&lt;pre&gt;&lt;code&gt;array = [1,2,3,4,5]
lam = lambda { |element| element * 10}
array.map(&amp;amp;lam)
# =&amp;gt; [10,20,30,40,50]

lamb = lamda { puts &#39;Hello&#39; }
lamb.call
# =&amp;gt; &#39;Hello&#39;
&lt;/code&gt;&lt;/pre&gt;

A lambda is also a member of the Proc class and as you can see above they are very similiar but they do have slight differences. When a Proc recieves less arguments than expected it&#39;ll assign nil to the missing arguments whereas a Lambda will not run and throw an error.

&lt;pre&gt;&lt;code&gt;proc = Proc.new { |a, b| &quot;#{a += 1}, #{b += 1}&quot; }

proc.call 1
# =&amp;gt; &quot;NoMethodError: undefined method &#39;+&#39; for nil:NilClass&quot;

lam = lambda { |a, b| &quot;#{a += 1}, #{b += 1}&quot; }

lam.call 1
ArgumentError: wrong number of arguments (1 for 2)&lt;/code&gt;&lt;/pre&gt;

Although both the above methods failed you can see that they failed for different reasons which shows the difference between how the execute.&lt;/p&gt;

&lt;p&gt;Another difference is how Procs and Lambdas treat &lt;code&gt;return&lt;/code&gt; thats rub within a method.

&lt;pre&gt;&lt;code&gt;def lambda_return
  lam = lambda { return }
  lam.call
  puts &#39;Hello lambda&#39;
end

lambda_test                 
# =&amp;gt;  &#39;Hello lambda&#39;


def proc_return
  proc = Proc.new { return }
  proc.call
  puts &#39;Hello proc&#39;
end

proc_test
# =&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

A return within a lambda triggers the code immediately outside the lambda block (&lt;code&gt;&#39;hello lambda&#39;&lt;/code&gt;) therefore giving us the statement printed out. In contrast the return within the Proc triggers the code outside of the method where the Proc is being called and so nothing is printed to the screen.
&lt;/p&gt;

&lt;p&gt;What makes Procs and Lambdas different from methods is that they do not begin a new closure scope and therefore you can access variables defined outside the scope of your Lambda or Proc which you can&#39;t with methods. Also unlike methods, Procs and Lambdas can also be assigned to variables.&lt;/p&gt;

&lt;p&gt;Chris&lt;/p&gt;
</description>
        <pubDate>Sun, 13 Sep 2015 13:00:00 +0100</pubDate>
        <link>http://chweeks.github.io/2015/09/13/research-challenge/</link>
        <guid isPermaLink="true">http://chweeks.github.io/2015/09/13/research-challenge/</guid>
        
        
      </item>
    
      <item>
        <title>Battleships 3.0</title>
        <description>&lt;h3 class=&quot;section-heading&quot;&gt;Finished&lt;/h3&gt;

&lt;p&gt;Finished isn&#39;t really the best word to describe my battleships program but all the features are there. All the mechanics to play the game are there and they are all wrapped up in a nice automated method so you don&#39;t have to type &lt;code&gt;player_1.fire(player_2, [0,0])&lt;/code&gt; every time its your turn to fire. What&#39;s left to do is a hell of a lot of refactoring. People talk about code smells and although I know I&#39;m quite strict about these things, I&#39;m sure my code still stinks. although other than a few alterations to make the code more readable I&#39;de say it is a success.&lt;/p&gt;

&lt;p&gt;I would have done some more refactoring today but I only actually finished of my game over an hour during lunch. For the majority of the day I was actually working on my partner, Lucy&#39;s code. Last week I would&#39;ve been really frustrated at not being able to work on my own code but now, I think in terms of learning, there is nothing better than reading through someone else&#39;s work and figuring out how its components work and it all fits together.&lt;/p&gt;

&lt;h3 class=&quot;section-heading&quot;&gt;Duck Typing&lt;/h3&gt;

&lt;p&gt;Today&#39;s research task was to investigate the concept of Duck Typing. A programming language can be classified as &#39;strongly typed&#39; or &#39;weakly typed&#39;. These are a kind of wishy washy terms but a strongly typed language is more likely to give you an error message if an argument given to a function does not match the expected type (integer, boolean...). The idea is that in Ruby which we&#39;re using, a &#39;weakly typed&#39; language you don&#39;t need a type in order to invoke an existing method on an object - if a method is defined on it, you can invoke it. eg: &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
class Duck
  def walk
    &#39;waddle&#39;
  end

  def quack
    &#39;quack&#39;
  end
end

class Person
  def walk
    &#39;I&#39;m waddling&#39;
  end

  def quack
    &#39;I&#39;m quacking&#39;
  end
end

def outdoors(thing)
  thing.walk
  thing.quack
end

duck = Duck.new
person = Person.new

outdoors(duck)
outdoors(person)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;
In duck typing, an object&#39;s suitability to be passed as an argument is determined by the presence of certain methods (quack, walk) and properties (with appropriate meaning), rather than the actual type of the object.
The name comes from the phrase &quot;When I see a bird that walks like a duck and swims like a duck and quacks like a duck, I call that bird a duck&quot;.&lt;/p&gt;

&lt;p&gt;Chris&lt;/p&gt;
</description>
        <pubDate>Thu, 10 Sep 2015 13:00:00 +0100</pubDate>
        <link>http://chweeks.github.io/2015/09/10/weeks2-day4/</link>
        <guid isPermaLink="true">http://chweeks.github.io/2015/09/10/weeks2-day4/</guid>
        
        
      </item>
    
      <item>
        <title>Battleships 2.5</title>
        <description>&lt;h3 class=&quot;section-heading&quot;&gt;So Close&lt;/h3&gt;

&lt;p&gt;After the headway I had made yesterday with my battleships program I was slightly worried about today. Most days I have had to change to the other persons code to work on and so start fresh and learn someone else&#39;s design. Not today though, luckily Tim was more than happy to change to my code to work on and so I could carry on with the plans I had been making the day before. It was also a great learning process going through line by line and explaining my code. This process led me to do a bit of refactoring to make it more readable and also pointed out a few redundant pieces of code that I could get rid of. By the end of the day, we had built the game and had automated it but there was still one bug that needed to be fixed and we unfortunately just ran out of time... and energy. Hopefully I&#39;ll be able to fix this bug and then can spend the rest of the week on getting a nice graphical interface to go with the game.&lt;/p&gt;

&lt;h3 class=&quot;section-heading&quot;&gt;Inheritance and Composition&lt;/h3&gt;

&lt;p&gt;Throughout the week we are given research topics to write up and today&#39;s was concerning the difference between inheritance and composition.&lt;/p&gt;

&lt;h2 id=&quot;inheritance&quot;&gt;Inheritance&lt;/h2&gt;

&lt;p&gt;The example below shows inheritance from &lt;strong&gt;parent class&lt;/strong&gt; &lt;code&gt;Dog&lt;/code&gt; to &lt;strong&gt;child class&lt;/strong&gt; &lt;code&gt;ShihTzu&lt;/code&gt;. The child class &lt;strong&gt;inherits&lt;/strong&gt; all the methods of the parent class without having define them. (A like to &lt;code&gt;include&lt;/code&gt;ing a &lt;code&gt;module&lt;/code&gt; &lt;code&gt;Dog&lt;/code&gt;.)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
class Dog

  def bark
    puts &quot;Woof!&quot;
  end

end

class ShihTzu &amp;lt; Dog
end

dog = Dog.new
dog.bark #=&amp;gt; Woof!

little_dog = ShihTzu.new
little_dog.bark #=&amp;gt; Woof!

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this example we&#39;ve explicitly defined our own instance of method &lt;code&gt;bark&lt;/code&gt; in the child class, and this is called in preference to the inherited one (from the parent class).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
class Dog

  def bark
    puts &quot;Woof!&quot;
  end

end

class ShihTzu &amp;lt; Dog

  def bark
    puts &quot;(Annoying) Yap!&quot;
  end

end

dog = Dog.new
dog.bark #=&amp;gt; Woof!

little_dog = ShihTzu.new
little_dog.bark #=&amp;gt; (Annoying) Yap!

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that within the overriding method in the child class, you can call &lt;code&gt;super&lt;/code&gt; to call the method in the parent class, as if &lt;code&gt;yield&lt;/code&gt;ing to it (you return back and carry on in the child method)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
class Dog

  def bark
    puts &quot;Woof!&quot;
  end

end

class ShihTzu &amp;lt; Dog

  def bark
    puts &quot;This dog goes...&quot;
    super
  end

end

dog = Dog.new
dog.bark #=&amp;gt; Woof!

little_dog = ShihTzu.new
little_dog.bark #=&amp;gt; This dog goes...
                #=&amp;gt;  Woof!

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;composition&quot;&gt;Composition&lt;/h2&gt;

&lt;p&gt;The below illustrates the concept of composition, where class &lt;code&gt;ShihTzu&lt;/code&gt; contains an instance of class &lt;code&gt;Dog&lt;/code&gt; and uses one of its methods (&lt;code&gt;bark&lt;/code&gt;).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
class Dog

  def bark
    puts &quot;Woof!&quot;
  end

end

class ShihTzu

  def initialize
    @dog = Dog.new
  end

  def bark
    @dog.bark
  end

end

dog = Dog.new
dog.bark #=&amp;gt; Woof!

little_dog = ShihTzu.new
little_dog.bark #=&amp;gt; Woof!
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;composition-vs-inheritance&quot;&gt;Composition vs Inheritance&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Why would we prefer composition over inheritance?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It’s very subjective! But, in general you would use inheritance where you want all of the methods from a class, and composition where you might only want to take some elements.&lt;/p&gt;

&lt;p&gt;For example, we’d probably want our &lt;code&gt;ShihTzu&lt;/code&gt; class to &lt;strong&gt;inherit&lt;/strong&gt; &lt;code&gt;Dog&lt;/code&gt; but only &lt;strong&gt;have an instance of&lt;/strong&gt; class &lt;code&gt;Animal&lt;/code&gt;, which includes functionality that all animals might have. All animals are &lt;strong&gt;composed with&lt;/strong&gt; an instance of &lt;code&gt;Animal&lt;/code&gt; class inside them, but only dogs will &lt;strong&gt;inherit&lt;/strong&gt; behaviour from class &lt;code&gt;Dog&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Chris&lt;/p&gt;
</description>
        <pubDate>Wed, 09 Sep 2015 13:00:00 +0100</pubDate>
        <link>http://chweeks.github.io/2015/09/09/weeks2-day3/</link>
        <guid isPermaLink="true">http://chweeks.github.io/2015/09/09/weeks2-day3/</guid>
        
        
      </item>
    
      <item>
        <title>Battleships 2.0</title>
        <description>&lt;h3 class=&quot;section-heading&quot;&gt;Minimum Viable Product&lt;/h3&gt;

&lt;p&gt;After trying and failing in one approach to this project &lt;a href=&quot;http://chweeks.github.io/2015/09/08/week2-day1/&quot;&gt;yesterday&lt;/a&gt; I was determined to try and make things as simple as possible for myself.&lt;/p&gt;

&lt;p&gt;Today I was working with Alex, we worked extremely well together and had the same views as to how we should build the game. Unlike yesterday we started by building a very basic system where you can create a boat that holds co-ordinates. You then have a player that can fire at a set of chosen co-ordinates . These co-ordinates are then compared to all the co-ordinates held by the ships and if there&#39;s a match they are deleted and the boat is destroyed. This was all built with ships of size 1 and a 4X4 grid. After this was built it was just a case of slowly scaling up from this working start point. We slowly added things such as making sure you couldn&#39;t place a ship outside the grid, or on top of one another and also compiling arrays of each players hits and misses, so they can check their shot history..&lt;/p&gt;

&lt;p&gt;Ideally we would like to automate the game as much as we can to minimise the user interaction with the code. We want to get it to a point where the user can just boot up the game and then not have to input anything but co-ordinates, when placing a ship and when firing. We were extremely close to finishing this so hopefully we&#39;ll be able to get together at some point later in the week and finish it off.&lt;/p&gt;

&lt;h3 class=&quot;section-heading&quot;&gt;Lexoo Lunch Talk&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/img/lexoo.jpg&quot; alt=&quot;lexoo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Today we had a talk by Chris O’Sullivan the CTO and co-founder of &lt;a href=&quot;https://www.lexoo.co.uk&quot;&gt;Lexoo&lt;/a&gt;, a place to get quick quotes from various lawyers online. He spoke about the best ways to ensure you save time and money when trying to create a business code wise. His key points were to write as little code as possible, get someone else to code instead and popping the &#39;Why?&#39; stack. Writing as little code as possible means saving your time and hence money and also means it is easier to maintain. Getting someone else to write the code is again based on saving your time and therefore money. Why spend time trying to recreate a service that someone else has already made when you can be focussing on your product. Finally popping the &#39;Why?&#39; stack, when implementing a new feature of your product you should ask yourself/team why you are doing it. If you keep recursively asking why, it should come down to these three reasons:
&lt;ul&gt;&lt;li&gt;Protect revenue&lt;/li&gt;
&lt;li&gt;Increase revenue&lt;/li&gt;
&lt;li&gt;Manage cost&lt;/li&gt;
&lt;/ul&gt;
 If it doesn&#39;t do one of these things then it is most likely a non-essential feature and your time and money is best spent elsewhere.
&lt;/p&gt;

&lt;p&gt;Chris&lt;/p&gt;
</description>
        <pubDate>Tue, 08 Sep 2015 13:00:00 +0100</pubDate>
        <link>http://chweeks.github.io/2015/09/08/week2-day2/</link>
        <guid isPermaLink="true">http://chweeks.github.io/2015/09/08/week2-day2/</guid>
        
        
      </item>
    
      <item>
        <title>Battleships</title>
        <description>&lt;h3 class=&quot;section-heading&quot;&gt;Feature Creep&lt;/h3&gt;

&lt;p&gt;Our project this week was to design the game &lt;a href=&quot;https://en.wikipedia.org/wiki/Battleship_(game)&quot;&gt;Battleships&lt;/a&gt;. Before I had started I thought this would be an easy thing to do and would get a working version of the game by the end of day 1. I was wrong.&lt;/p&gt;

&lt;p&gt;I was paired with Joe for the day, who is a very smart guy and so we dove straight into how we thought we should build our game. Long story short by the end of the day we had written quite a lot of code that accomplished a lot, except play the game. I believe we were doomed from the start due to feature creep. Feature creep is the expansion or addition of new features in a product which go beyond the basic function of the product. We were thinking too far ahead and so started implementing features that weren&#39;t essential to the game, such as a visual representation of the grid. Obviously in the long run this would be a great feature to have but we should have been following the principles of MVP (minimum viable product) and first built the simplest version of the game we could. Once we had that we could build some complexity on top of a solid foundation of a working game.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/complexity.jpg&quot; alt=&quot;complexity&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Luckily tomorrow I can start again fresh and try out some new ideas of how to design the game. Also a lot of of the more time-consuming code we wrote, such as giving a ship its co-ordinates through a starting co-ordinate and an orientation can be re-used and re-implemented to speed up my work tomorrow.&lt;/p&gt;

&lt;p&gt;Chris&lt;/p&gt;
</description>
        <pubDate>Mon, 07 Sep 2015 13:00:00 +0100</pubDate>
        <link>http://chweeks.github.io/2015/09/07/week2-day1/</link>
        <guid isPermaLink="true">http://chweeks.github.io/2015/09/07/week2-day1/</guid>
        
        
      </item>
    
      <item>
        <title>Airport Challenge</title>
        <description>&lt;h3 class=&quot;section-heading&quot;&gt;The Task&lt;/h3&gt;

&lt;p&gt;Every week we have a weekend challenge meant to test and solidify what we have learnt throughout the week. We were told to ensure that by Monday morning at 9AM we had submitted a pull request with our challenge with even the smallest amount of code if necessary, just something. We were also told about not worrying about completely finishing the Boris-Bikes project before starting the challenge. So naturally I went about completing the Boris-Bikes challenge all Saturday and didn&#39;t even look at the challenge till Sunday.&lt;/p&gt;
&lt;p&gt;Our challenge for the weekend was to create a basic simulation of an airport through a set of given user stories. The task had very similar elements to the Boris-Bikes projects. We had two Objects a plane and an airport. A plane needed to have a status, either flying or landed. The airport needed to be able to instruct the plane to land and to instruct it to take off. The planes couldn&#39;t land if the airport was full and couldn&#39;t land or take off when the weather was stormy.&lt;/p&gt;
&lt;p&gt;The code itself was very simple but as usual it was the tests that made it tricky. Having a random method for the chance of stormy weather made the tests more difficult as we had to learn about stubbing. Essentially when testing to make sure the planes couldn&#39;t land or take off in stormy weather I had to &#39;stub&#39; the random_weather method to ensure that the weather was always stormy for those tests. &lt;/p&gt;
&lt;p&gt;Once submitted the code gets &#39;marked&#39; and I use marked very loosely as when its submitted some automated tests are run on the code. The main test is that all your written tests pass and also that your tests cover everything within the system. I got a hundred percent coverage which I was really happy with but then there was hound. From what I understand this hound program goes through your code and tests its readability. It throws up errors for lines and methods that are too long or if indentation is wrong. I had one of these errors that I just couldn&#39;t seem to shake for the longest time but managed to succeed in the end.&lt;/p&gt;

&lt;p&gt; My first week at Makers has been an amazing experience, I&#39;ve had a lot of fun and have learnt more than I thought possible. Their have been some great moments where you seem to understand everything and feel like a god, but their have been even more moments where you come crashing face first back down to earth and realise you have but scratched the surface.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://xkcd.com/979/&quot;&gt;&lt;img src=&quot;/img/program-comic.jpg&quot; alt=&quot;https://xkcd.com/979/&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;1 week down, 11 to go.&lt;/p&gt;

&lt;p&gt;Chris&lt;/p&gt;
</description>
        <pubDate>Sun, 06 Sep 2015 13:00:00 +0100</pubDate>
        <link>http://chweeks.github.io/2015/09/06/weekend-challenge-1/</link>
        <guid isPermaLink="true">http://chweeks.github.io/2015/09/06/weekend-challenge-1/</guid>
        
        
      </item>
    
      <item>
        <title>Day 4</title>
        <description>&lt;h3 class=&quot;section-heading&quot;&gt;Doubles&lt;/h3&gt;

&lt;p&gt;Today was the last day to work on our Boris bike projects. The morning standup went for quite a while as we went over using doubles and verified doubles in our tests.&lt;/p&gt;

&lt;p&gt;While writing Rspec tests initially for the Boris-Bikes projects, I may have written a test like this in the DockingStation spec file:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;bike = Bike.new&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;subject.dock(bike)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;expect(subject.bikes.include?(bike)).to eql true&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;
This is to test whether the DockingStation method &#39;dock&#39; adds the bike to the array bikes within the docking station. This test is not very good as it includes creating an instance of the Bike class and so the test is not isolated. Therefore any changes we make to the Bike class could have a negative effect on all our tests pertaining to the DockingStation class. This is where a double can be very handy. By using a double we create a kind of &#39;stand in&#39; for the bike object without having to create a new Bike object.
&lt;/p&gt;
&lt;p&gt;&lt;code&gt;bike = :bike&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;subject.dock(bike)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;expect(subject.bikes.include?(bike)).to eql true&lt;/code&gt;&lt;/p&gt;
&lt;p&gt; This way we can test the DockingStation in isolation and any future changes we make to the bike class will not alter the outcome of our tests. Armed with this new knowledge Gavin and I still didn&#39;t use them till the end. Our thought process was to get the whole system working first and then refactor it to use doubles and clean it up a bit. By the end of the day we had finished all the features of the system and left the refactoring to do in our spare time.&lt;/p&gt;

&lt;p&gt;Although, saying that, I don&#39;t know how much spare time we&#39;ll be getting as we had our first weekend challenge go live this afternoon. But I&#39;m going to take the evening off and try not to even look at the challenge till tomorrow. Then its back on the grind.&lt;/p&gt;

&lt;p&gt;Chris&lt;/p&gt;
</description>
        <pubDate>Fri, 04 Sep 2015 13:00:00 +0100</pubDate>
        <link>http://chweeks.github.io/2015/09/04/day4/</link>
        <guid isPermaLink="true">http://chweeks.github.io/2015/09/04/day4/</guid>
        
        
      </item>
    
      <item>
        <title>Day 3</title>
        <description>&lt;h3 class=&quot;section-heading&quot;&gt;Do Over&lt;/h3&gt;

&lt;p&gt;This morning we had our standup run, with boundless energy as always, by our coach Tansaku. We discussed what we had struggled with the day before and a large topic of discussion was the containment of error methods within blocks rather than normal parenthesis. We were also given the task of writing a blog post on Red-Green-Refactor and how its linked to Test Driven Development which I&#39;ve already mentioned &lt;a href=&quot;http://chweeks.github.io/2015/09/02/day2/&quot;&gt;here.&lt;/a&gt;&lt;/p&gt;

&lt;h3 class=&quot;section-heading&quot;&gt;Boris Bikes part-2&lt;/h3&gt;

&lt;p&gt;After the standup we split into our new pairing partners for the day. I was paired with David who was a great guy to work with. It was here that I realised how much Philip and I had done the day before, which I was glad to know as we were working till around 8 last night. On the other hand, the way the pair programming works here means that you always jump down to the code of the person who has done less. This means no one is rushed and has an equal opportunity to work through the projects in their own time. It also gives the chance to the person jumping down to reinforce what they&#39;ve learnt by guiding their pair through the challenges. Although you know in the long run this way of things will help rather than hinder you, it is tough to not get frustrated when you think of how far you could get if you were working on your own.&lt;/p&gt;

&lt;p&gt;By the afternoon we had caught up to my work from the day before and then started to make great strides into the rest of the project. We worked really well together and there were a lot of good &#39;debates&#39; through the day on which way to do things. This made sure we understood and knew why we thought our way was best, which ensured we learnt the most we could from each other.&lt;/p&gt;

&lt;p&gt;After yesterday I really didn&#39;t fancy staying too late and so left pretty early as we made some good progress in the afternoon and very close to finishing the project.&lt;/p&gt;

&lt;p&gt;Chris&lt;/p&gt;
</description>
        <pubDate>Thu, 03 Sep 2015 13:00:00 +0100</pubDate>
        <link>http://chweeks.github.io/2015/09/03/day3/</link>
        <guid isPermaLink="true">http://chweeks.github.io/2015/09/03/day3/</guid>
        
        
      </item>
    
      <item>
        <title>Day 2</title>
        <description>&lt;h3 class=&quot;section-heading&quot;&gt;Standup&lt;/h3&gt;

&lt;p&gt;The second day started with the cohort separating into bytes (small groups) in order to have their standups. This ideally is a short meeting in the morning to discuss what you had done the day before and what you plan to do today. We would also share what we had struggled with in order to get our coaches input. Obviously we hadn&#39;t written any code yet and so it was simply to get used to the idea of a standup and for our coach (Sam A.K.A Tansaku) to tell us our projects for the week.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/standup.jpg&quot; alt=&quot;standup&quot; /&gt;&lt;/p&gt;

&lt;h3 class=&quot;section-heading&quot;&gt;Boris Bikes&lt;/h3&gt;

&lt;p&gt;The project for our first week is to create a system that&#39;ll simulate the use of Boris Bikes. The basics of what we achieved today was creating a DockingStation class that has a capacity, could have a bike docked into it and also release a bike to a customer. We also created Bike class which creates a bike that can be working or not. We also implemented various other features but nothing too taxing. The code itself was the easiest part of the first day it&#39;s the test driven development that drove me a bit crazy.&lt;/p&gt;

&lt;h3 class=&quot;section-heading&quot;&gt;Test Driven Development&lt;/h3&gt;

&lt;p&gt;TDD is a software development process which repeats a small cycle of development.
&lt;ol&gt;
&lt;li&gt;Write an initially failing test for a new feature or function you wish to implement&lt;/li&gt;
&lt;li&gt;Write the bare minimum amount of code that will pass the test&lt;/li&gt;
&lt;li&gt;Refactor the code to a decent standard&lt;/li&gt;
&lt;li&gt;Repeat the process&lt;/li&gt;
&lt;/ol&gt;

This is also known as the Red-Green-Refactor cycle, red referring to the failed test, green the passed test and refactor.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/rgrefactor.jpg&quot; alt=&quot;rgrefactor&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This allows you to change little bits at a time and so always have a working code base that you can jump back to or go live if needed. This style also makes it a lot easier for the next developer working on the code to understand what it does and how it works.&lt;/p&gt;

&lt;p&gt;Writing the tests first was a difficult concept to come to terms with as all you wanted to do was just get your head down and start creating features. It was also made more difficult as the tests are written using Rspec which, although is pure Ruby, has a whole new set of syntax to learn. The pair programming aspect of it was also a bit strange to begin with but I had a great partner in Phil and by the end of the day I was pretty confident with the syntax and the TDD side of it was coming easier and making more sense.&lt;/p&gt;

&lt;p&gt;Chris&lt;/p&gt;
</description>
        <pubDate>Wed, 02 Sep 2015 13:00:00 +0100</pubDate>
        <link>http://chweeks.github.io/2015/09/02/day2/</link>
        <guid isPermaLink="true">http://chweeks.github.io/2015/09/02/day2/</guid>
        
        
      </item>
    
  </channel>
</rss>
